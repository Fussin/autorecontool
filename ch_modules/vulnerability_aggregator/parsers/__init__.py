# This file makes the 'parsers' directory a Python package.

from .parse_xss import parse_xss_vulnerabilities
from .parse_sqli import parse_sqli_vulnerabilities
from .parse_lfi import parse_lfi_vulnerabilities
from .parse_cors import parse_cors_vulnerabilities
from .parse_sensitive_data import parse_sensitive_data_vulnerabilities
from .parse_ssrf import parse_ssrf_vulnerabilities
from .parse_xxe import parse_xxe_vulnerabilities
from .parse_rce import parse_rce_vulnerabilities

# This dictionary maps vulnerability result filenames (or types) to their parsers.
# The keys should match the filenames produced by the vulnerability modules.
# For example, if XSS module outputs "xss_findings.json", the key is "xss_findings.json".
# However, the current convention is more like "xss_vulnerabilities.json".
# Let's use a convention that maps a module type to its parser and expected filename.

PARSER_MAPPING = {
    "xss": {
        "parser_func": parse_xss_vulnerabilities,
        "filename": "xss_vulnerabilities.json"
    },
    "sqli": {
        "parser_func": parse_sqli_vulnerabilities,
        "filename": "sqli_vulnerabilities.json"
    },
    "lfi": {
        "parser_func": parse_lfi_vulnerabilities,
        "filename": "lfi_vulnerabilities.json" # Or lfi_findings.json based on project spec
    },
    "cors": {
        "parser_func": parse_cors_vulnerabilities,
        "filename": "cors_vulnerabilities.json" # Or cors_misconfig.json
    },
    "sensitive_data": {
        "parser_func": parse_sensitive_data_vulnerabilities,
        "filename": "sensitive_data_findings.json" # Or sensitive_exposure.txt/json
    },
    "ssrf": {
        "parser_func": parse_ssrf_vulnerabilities,
        "filename": "ssrf_vulnerabilities.json"
    },
    "xxe": {
        "parser_func": parse_xxe_vulnerabilities,
        "filename": "xxe_vulnerabilities.json"
    },
    "rce": {
        "parser_func": parse_rce_vulnerabilities,
        "filename": "rce_vulnerabilities.json"
    }
    # Add other vulnerability types and their parsers here as they are created
    # e.g. "subdomain_takeover", "open_redirect", etc.
}

# Also, the older sensitive_exposure.txt needs consideration if it's still active.
# For now, focusing on the structured JSON outputs from the newer placeholder modules.
# The `sensitive_data` parser above is intended for `sensitive_data_findings.json`.
# If `sensitive_exposure.txt` (from a much earlier phase) is still generated and relevant,
# it would need its own parser or be deprecated.
# The project spec lists "sensitive_exposure.txt" AND "sensitive_data_findings.json"
# Let's assume `sensitive_data_findings.json` is the primary structured one.
