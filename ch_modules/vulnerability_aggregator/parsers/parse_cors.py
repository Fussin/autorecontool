import json
import uuid
from datetime import datetime, timezone

def parse_cors_vulnerabilities(json_file_path, scan_id):
    """
    Parses CORS Misconfiguration vulnerability data from a JSON file
    and transforms it into the unified vulnerability schema.

    Args:
        json_file_path (str): Path to the CORS module's JSON output file.
        scan_id (str): The ID of the scan job.

    Returns:
        list: A list of vulnerability objects adhering to the unified schema.
    """
    unified_vulnerabilities = []
    try:
        with open(json_file_path, 'r') as f:
            data = json.load(f)
    except FileNotFoundError:
        return unified_vulnerabilities
    except json.JSONDecodeError:
        return unified_vulnerabilities

    # Expected placeholder CORS module output:
    # {
    #   "notes": "Conceptual CORS scan for example.com",
    #   "vulnerabilities": [
    #     {
    #       "url": "http://api.example.com/data",
    #       "type": "Wildcard Origin (Access-Control-Allow-Origin: *)",
    #       "tool": "CORS Hunter (Conceptual)",
    #       "evidence": "Access-Control-Allow-Origin header was '*' with credentials allowed."
    #     }
    #   ]
    # }

    raw_vulnerabilities = data.get("vulnerabilities", [])
    if not raw_vulnerabilities:
        return unified_vulnerabilities

    for vuln in raw_vulnerabilities:
        vuln_type_detail = vuln.get("type", "Generic CORS Misconfiguration")

        severity = "Medium" # Default for many CORS issues
        confidence = "Medium"

        if "Wildcard Origin" in vuln_type_detail:
            if "credentials allowed" in vuln.get("evidence", "").lower() or \
               "Access-Control-Allow-Credentials" in vuln.get("evidence", "") and "true" in vuln.get("evidence", "") : # ACAO:* with ACAC:true is High risk
                severity = "High"
            else: # ACAO:* without credentials is often Medium or Low
                severity = "Medium"
            confidence = "High" # Usually easy to confirm
        elif "Reflected Origin" in vuln_type_detail:
            severity = "High"
            confidence = "Medium"
        elif "Null Origin" in vuln_type_detail:
            severity = "Medium"
            confidence = "Medium"

        description = vuln.get("description", f"Potential CORS Misconfiguration: {vuln_type_detail} identified by {vuln.get('tool', 'CORS Hunter')}.")
        if vuln.get("evidence"):
            description += f" Evidence: {vuln.get('evidence')}"

        now_utc = datetime.now(timezone.utc).isoformat()

        unified_vuln = {
            "id": str(uuid.uuid4()),
            "vulnerability_type": f"CORS Misconfiguration - {vuln_type_detail}",
            "description": description,
            "target_url": vuln.get("url", "N/A"),
            "affected_component": "HTTP Headers (CORS related)",
            "payload": vuln.get("origin_tested", None), # e.g., the malicious origin used in test
            "evidence": vuln.get("evidence", f"Finding reported by {vuln.get('tool', 'CORS Hunter')}."),
            "severity": severity,
            "confidence": confidence,
            "source_modules": [vuln.get("tool", "CORS Hunter")],
            "first_seen_timestamp": now_utc,
            "last_seen_timestamp": now_utc,
            "status": "New",
            "cwe_ids": [346, 942], # CWE for Origin Validation Error, Overly Permissive CORS Policy
            "cvss_vector": None,
            "cvss_score": None,
            "remediation_advice": "Configure CORS policies to allow only trusted origins. Avoid using wildcard '*' if credentials are required. Validate the 'Origin' header on the server-side.",
            "tags": ["CORS", vuln_type_detail.replace(" ", "_").replace("(", "").replace(")", ""), vuln.get("tool", "CORS Hunter").replace(" ", "_")],
            "scan_id": scan_id
        }
        unified_vulnerabilities.append(unified_vuln)

    return unified_vulnerabilities

if __name__ == '__main__':
    dummy_data = {
        "notes": "Conceptual CORS scan completed for example.com.",
        "vulnerabilities": [
            {
                "url": "http://api.example.com/user_data",
                "type": "Wildcard Origin (Access-Control-Allow-Origin: *) with Credentials",
                "tool": "CORS Hunter (Conceptual)",
                "evidence": "Access-Control-Allow-Origin header was '*' and Access-Control-Allow-Credentials was 'true'.",
                "origin_tested": "https://malicious.example.net"
            },
            {
                "url": "http://api.example.com/public_info",
                "type": "Reflected Origin",
                "tool": "CORS Hunter (Conceptual)",
                "evidence": "Server reflected arbitrary 'Origin' header in 'Access-Control-Allow-Origin'.",
                "origin_tested": "https://attacker.com"
            }
        ]
    }
    dummy_file = "dummy_cors_vulnerabilities.json"
    with open(dummy_file, 'w') as f:
        json.dump(dummy_data, f, indent=2)

    parsed_vulns = parse_cors_vulnerabilities(dummy_file, "test_scan_cors_001")
    if parsed_vulns:
        print(f"Successfully parsed {len(parsed_vulns)} CORS vulnerabilities:")
        for v in parsed_vulns:
            print(json.dumps(v, indent=2))
    else:
        print("No CORS vulnerabilities parsed or file not found.")

    import os
    os.remove(dummy_file)
