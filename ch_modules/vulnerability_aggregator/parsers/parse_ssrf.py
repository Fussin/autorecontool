import json
import uuid
from datetime import datetime, timezone

def parse_ssrf_vulnerabilities(json_file_path, scan_id):
    """
    Parses Server-Side Request Forgery (SSRF) vulnerability data from a JSON file
    and transforms it into the unified vulnerability schema.

    Args:
        json_file_path (str): Path to the SSRF module's JSON output file.
        scan_id (str): The ID of the scan job.

    Returns:
        list: A list of vulnerability objects adhering to the unified schema.
    """
    unified_vulnerabilities = []
    try:
        with open(json_file_path, 'r') as f:
            data = json.load(f)
    except FileNotFoundError:
        return unified_vulnerabilities
    except json.JSONDecodeError:
        return unified_vulnerabilities

    # Expected placeholder SSRF module output:
    # {
    #   "notes": "Conceptual SSRF scan for example.com",
    #   "vulnerabilities": [
    #     {
    #       "url": "http://example.com/proxy?url=http://internal.service",
    #       "param": "url",
    #       "type": "Full Response SSRF",
    #       "tool": "SSRF Hunter (Conceptual)",
    #       "evidence": "Successfully retrieved content from internal.service via proxy.",
    #       "internal_target_tried": "http://internal.service"
    #     }
    #   ]
    # }

    raw_vulnerabilities = data.get("vulnerabilities", [])
    if not raw_vulnerabilities:
        return unified_vulnerabilities

    for vuln in raw_vulnerabilities:
        vuln_type_detail = vuln.get("type", "Generic SSRF")

        severity = "High" # SSRF is generally High or Critical
        confidence = "Medium" # Needs good evidence

        if "Full Response" in vuln_type_detail or "Blind SSRF (DNS Callback)" in vuln_type_detail:
            severity = "Critical"
            confidence = "High" if "DNS Callback" in vuln_type_detail else "Medium" # DNS callback is strong evidence
        elif "Error-based" in vuln_type_detail: # Error messages might leak internal info
            severity = "Medium"
            confidence = "Medium"

        description = vuln.get("description", f"Potential Server-Side Request Forgery (SSRF): {vuln_type_detail} identified by {vuln.get('tool', 'SSRF Hunter')}.")
        if vuln.get("param"):
            description += f" Affected parameter: {vuln.get('param')}."
        if vuln.get("internal_target_tried"):
            description += f" Attempted to access: {vuln.get('internal_target_tried')}."
        if vuln.get("evidence"):
            description += f" Evidence: {vuln.get('evidence')}"

        now_utc = datetime.now(timezone.utc).isoformat()

        unified_vuln = {
            "id": str(uuid.uuid4()),
            "vulnerability_type": f"Server-Side Request Forgery (SSRF) - {vuln_type_detail}",
            "description": description,
            "target_url": vuln.get("url", "N/A"),
            "affected_component": f"Parameter: {vuln.get('param')}" if vuln.get('param') else "N/A",
            "payload": vuln.get("internal_target_tried", None),
            "evidence": vuln.get("evidence", f"Finding reported by {vuln.get('tool', 'SSRF Hunter')}."),
            "severity": severity,
            "confidence": confidence,
            "source_modules": [vuln.get("tool", "SSRF Hunter")],
            "first_seen_timestamp": now_utc,
            "last_seen_timestamp": now_utc,
            "status": "New",
            "cwe_ids": [918], # CWE for SSRF
            "cvss_vector": None,
            "cvss_score": None,
            "remediation_advice": "Implement strict allowlists for outgoing requests. Validate and sanitize user-supplied URLs. Avoid directly passing user input to request libraries. Use network segmentation.",
            "tags": ["SSRF", vuln_type_detail.replace(" ", "_"), vuln.get("tool", "SSRF Hunter").replace(" ", "_")],
            "scan_id": scan_id
        }
        unified_vulnerabilities.append(unified_vuln)

    return unified_vulnerabilities

if __name__ == '__main__':
    dummy_data = {
        "notes": "Conceptual SSRF scan completed for example.com.",
        "vulnerabilities": [
            {
                "url": "http://example.com/fetch?resource=http://169.254.169.254/latest/meta-data/",
                "param": "resource",
                "type": "Full Response SSRF (Cloud Metadata Access)",
                "tool": "SSRF Hunter (Conceptual)",
                "evidence": "Successfully retrieved content resembling AWS metadata.",
                "internal_target_tried": "http://169.254.169.254/latest/meta-data/"
            },
            {
                "url": "http://example.com/image_proxy?img_url=internal-dns-record.local",
                "param": "img_url",
                "type": "Blind SSRF (DNS Callback)",
                "tool": "SSRF Hunter (Conceptual)",
                "evidence": "Received DNS callback from internal-dns-record.local via interaction server.",
                "internal_target_tried": "internal-dns-record.local"
            }
        ]
    }
    dummy_file = "dummy_ssrf_vulnerabilities.json"
    with open(dummy_file, 'w') as f:
        json.dump(dummy_data, f, indent=2)

    parsed_vulns = parse_ssrf_vulnerabilities(dummy_file, "test_scan_ssrf_001")
    if parsed_vulns:
        print(f"Successfully parsed {len(parsed_vulns)} SSRF vulnerabilities:")
        for v in parsed_vulns:
            print(json.dumps(v, indent=2))
    else:
        print("No SSRF vulnerabilities parsed or file not found.")

    import os
    os.remove(dummy_file)
