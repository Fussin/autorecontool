import json
import uuid
from datetime import datetime, timezone

def parse_sensitive_data_vulnerabilities(json_file_path, scan_id):
    """
    Parses Sensitive Data Exposure vulnerability data from a JSON file
    and transforms it into the unified vulnerability schema.

    Args:
        json_file_path (str): Path to the Sensitive Data module's JSON output file.
        scan_id (str): The ID of the scan job.

    Returns:
        list: A list of vulnerability objects adhering to the unified schema.
    """
    unified_vulnerabilities = []
    try:
        with open(json_file_path, 'r') as f:
            data = json.load(f)
    except FileNotFoundError:
        return unified_vulnerabilities
    except json.JSONDecodeError:
        return unified_vulnerabilities

    # Expected placeholder Sensitive Data module output:
    # {
    #   "notes": "Conceptual sensitive data scan for example.com",
    #   "vulnerabilities": [
    #     {
    #       "url": "http://example.com/.env",
    #       "type": "Environment File Exposed (.env)",
    #       "tool": "Sensitive Data Hunter (Conceptual)",
    #       "evidence": "HTTP 200 OK on /.env, content shows KEY=VALUE pairs."
    #     },
    #     {
    #       "url": "http://example.com/api/users",
    #       "type": "API Key Detected in Response",
    #       "tool": "Sensitive Data Hunter (Conceptual)",
    #       "pattern_matched": "AKIA[0-9A-Z]{16}"
    #     }
    #   ]
    # }

    raw_vulnerabilities = data.get("vulnerabilities", [])
    if not raw_vulnerabilities:
        return unified_vulnerabilities

    for vuln in raw_vulnerabilities:
        vuln_type_detail = vuln.get("type", "Generic Sensitive Data Exposure")

        severity = "Medium" # Default
        confidence = "Medium"

        if "API Key" in vuln_type_detail or "Secret" in vuln_type_detail:
            severity = "High"
            confidence = "Medium" # Patterns can have FPs
        elif "Environment File" in vuln_type_detail or ".git" in vuln_type_detail or "Backup File" in vuln_type_detail:
            severity = "High"
            confidence = "High" # If file is accessible, it's usually a clear issue
        elif "Source Code" in vuln_type_detail:
            severity = "Medium"
            confidence = "Medium"

        description = vuln.get("description", f"Potential Sensitive Data Exposure: {vuln_type_detail} identified by {vuln.get('tool', 'Sensitive Data Hunter')}.")
        if vuln.get("pattern_matched"):
            description += f" Matched pattern: {vuln.get('pattern_matched')}."
        if vuln.get("evidence"):
            description += f" Evidence: {vuln.get('evidence')}"


        now_utc = datetime.now(timezone.utc).isoformat()

        unified_vuln = {
            "id": str(uuid.uuid4()),
            "vulnerability_type": f"Sensitive Data Exposure - {vuln_type_detail}",
            "description": description,
            "target_url": vuln.get("url", "N/A"),
            "affected_component": vuln.get("location", "File or Response Body"), # e.g. "File Path", "JSON Response"
            "payload": None, # Not typically applicable in the same way as XSS/SQLi
            "evidence": vuln.get("evidence", f"Finding reported by {vuln.get('tool', 'Sensitive Data Hunter')}. Matched: {vuln.get('pattern_matched', 'N/A')}."),
            "severity": severity,
            "confidence": confidence,
            "source_modules": [vuln.get("tool", "Sensitive Data Hunter")],
            "first_seen_timestamp": now_utc,
            "last_seen_timestamp": now_utc,
            "status": "New",
            "cwe_ids": [200, 312, 530, 541], # CWE for Info Exposure, Cleartext Storage, Exposed Git, Exposed Config File
            "cvss_vector": None,
            "cvss_score": None,
            "remediation_advice": "Ensure sensitive files (configs, backups, .git) are not web-accessible. Regularly scan for hardcoded secrets and API keys. Review API responses for unintended data exposure.",
            "tags": ["SensitiveData", vuln_type_detail.replace(" ", "_").replace("(", "").replace(")", ""), vuln.get("tool", "Sensitive Data Hunter").replace(" ", "_")],
            "scan_id": scan_id
        }
        unified_vulnerabilities.append(unified_vuln)

    return unified_vulnerabilities

if __name__ == '__main__':
    dummy_data = {
        "notes": "Conceptual sensitive data scan completed for example.com.",
        "vulnerabilities": [
            {
                "url": "http://example.com/.git/config",
                "type": ".git Folder Exposed",
                "tool": "Sensitive Data Hunter (Conceptual)",
                "evidence": "HTTP 200 OK on /.git/config."
            },
            {
                "url": "http://api.example.com/debug_info",
                "type": "Hardcoded API Key in JS File",
                "tool": "Sensitive Data Hunter (Conceptual)",
                "evidence": "Found pattern matching AWS Key in app.js linked from page.",
                "pattern_matched": "AKIA[0-9A-Z]{16}",
                "location": "JavaScript File Content"
            }
        ]
    }
    dummy_file = "dummy_sensitive_data_vulnerabilities.json"
    with open(dummy_file, 'w') as f:
        json.dump(dummy_data, f, indent=2)

    parsed_vulns = parse_sensitive_data_vulnerabilities(dummy_file, "test_scan_sensitivedata_001")
    if parsed_vulns:
        print(f"Successfully parsed {len(parsed_vulns)} Sensitive Data vulnerabilities:")
        for v in parsed_vulns:
            print(json.dumps(v, indent=2))
    else:
        print("No Sensitive Data vulnerabilities parsed or file not found.")

    import os
    os.remove(dummy_file)
