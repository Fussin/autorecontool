import json
import uuid
from datetime import datetime, timezone

def parse_rce_vulnerabilities(json_file_path, scan_id):
    """
    Parses Remote Code Execution (RCE) vulnerability data from a JSON file
    and transforms it into the unified vulnerability schema.

    Args:
        json_file_path (str): Path to the RCE module's JSON output file.
        scan_id (str): The ID of the scan job.

    Returns:
        list: A list of vulnerability objects adhering to the unified schema.
    """
    unified_vulnerabilities = []
    try:
        with open(json_file_path, 'r') as f:
            data = json.load(f)
    except FileNotFoundError:
        return unified_vulnerabilities
    except json.JSONDecodeError:
        return unified_vulnerabilities

    # Expected placeholder RCE module output:
    # {
    #   "notes": "Conceptual RCE scan for example.com",
    #   "vulnerabilities": [
    #     {
    #       "url": "http://example.com/exec?cmd=id",
    #       "param": "cmd",
    #       "type": "Command Injection (id)",
    #       "tool": "RCE Hunter (Conceptual)",
    #       "evidence": "Output contained 'uid=0(root)' or similar.",
    #       "payload_used": "id"
    #     }
    #   ]
    # }

    raw_vulnerabilities = data.get("vulnerabilities", [])
    if not raw_vulnerabilities:
        return unified_vulnerabilities

    for vuln in raw_vulnerabilities:
        vuln_type_detail = vuln.get("type", "Generic RCE")

        # RCE is almost always Critical
        severity = "Critical"
        confidence = "Medium" # Depends on evidence; conceptual is medium

        if "Command Injection" in vuln_type_detail:
            confidence = "High" if "uid=" in vuln.get("evidence","") or "gid=" in vuln.get("evidence","") or "whoami" in vuln.get("evidence","") else "Medium"
        elif "Deserialization" in vuln_type_detail:
            confidence = "Medium" # Often needs specific gadget chains
        elif "File Upload" in vuln_type_detail and "Web Shell" in vuln_type_detail:
            confidence = "High"

        description = vuln.get("description", f"Potential Remote Code Execution (RCE): {vuln_type_detail} identified by {vuln.get('tool', 'RCE Hunter')}.")
        if vuln.get("param"):
            description += f" Affected parameter/input: {vuln.get('param')}."
        if vuln.get("payload_used"):
            description += f" Payload used: {vuln.get('payload_used')}."
        if vuln.get("evidence"):
            description += f" Evidence: {vuln.get('evidence')}"

        now_utc = datetime.now(timezone.utc).isoformat()

        unified_vuln = {
            "id": str(uuid.uuid4()),
            "vulnerability_type": f"Remote Code Execution (RCE) - {vuln_type_detail}",
            "description": description,
            "target_url": vuln.get("url", "N/A"),
            "affected_component": f"Parameter: {vuln.get('param')}" if vuln.get('param') else vuln.get("injection_point", "N/A"),
            "payload": vuln.get("payload_used", None),
            "evidence": vuln.get("evidence", f"Finding reported by {vuln.get('tool', 'RCE Hunter')}."),
            "severity": severity,
            "confidence": confidence,
            "source_modules": [vuln.get("tool", "RCE Hunter")],
            "first_seen_timestamp": now_utc,
            "last_seen_timestamp": now_utc,
            "status": "New",
            "cwe_ids": [77, 78, 94, 502], # CWEs for Command Injection, OS Command Injection, Code Injection, Deserialization
            "cvss_vector": None,
            "cvss_score": None,
            "remediation_advice": "Strictly validate and sanitize all user inputs. Avoid passing user input directly to system commands or evaluation functions. Use secure APIs that do not interpret input as code. Implement robust input validation and context-specific output encoding.",
            "tags": ["RCE", vuln_type_detail.replace(" ", "_"), vuln.get("tool", "RCE Hunter").replace(" ", "_")],
            "scan_id": scan_id
        }
        unified_vulnerabilities.append(unified_vuln)

    return unified_vulnerabilities

if __name__ == '__main__':
    dummy_data = {
        "notes": "Conceptual RCE scan completed for example.com.",
        "vulnerabilities": [
            {
                "url": "http://vulnerable-app.com/admin/settings?debug_cmd=cat /etc/shadow",
                "param": "debug_cmd",
                "type": "OS Command Injection (Blind)",
                "tool": "RCE Hunter (Conceptual)",
                "evidence": "Time delay observed consistent with command execution, or OOB interaction if configured.",
                "payload_used": "cat /etc/shadow; sleep 5"
            },
            {
                "url": "http://vulnerable-app.com/api/process_data",
                "type": "Java Deserialization RCE",
                "tool": "RCE Hunter (Conceptual)",
                "evidence": "Specific Java deserialization gadget chain triggered OOB callback.",
                "payload_used": "ysoserial_payload_base64_encoded",
                "injection_point": "Serialized POST Body"
            }
        ]
    }
    dummy_file = "dummy_rce_vulnerabilities.json"
    with open(dummy_file, 'w') as f:
        json.dump(dummy_data, f, indent=2)

    parsed_vulns = parse_rce_vulnerabilities(dummy_file, "test_scan_rce_001")
    if parsed_vulns:
        print(f"Successfully parsed {len(parsed_vulns)} RCE vulnerabilities:")
        for v in parsed_vulns:
            print(json.dumps(v, indent=2))
    else:
        print("No RCE vulnerabilities parsed or file not found.")

    import os
    os.remove(dummy_file)
