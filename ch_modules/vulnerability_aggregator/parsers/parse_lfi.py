import json
import uuid
from datetime import datetime, timezone

def parse_lfi_vulnerabilities(json_file_path, scan_id):
    """
    Parses Local File Inclusion (LFI) vulnerability data from a JSON file
    and transforms it into the unified vulnerability schema.

    Args:
        json_file_path (str): Path to the LFI module's JSON output file.
        scan_id (str): The ID of the scan job.

    Returns:
        list: A list of vulnerability objects adhering to the unified schema.
    """
    unified_vulnerabilities = []
    try:
        with open(json_file_path, 'r') as f:
            data = json.load(f)
    except FileNotFoundError:
        return unified_vulnerabilities
    except json.JSONDecodeError:
        return unified_vulnerabilities

    # Expected placeholder LFI module output:
    # {
    #   "notes": "Conceptual LFI scan for example.com",
    #   "vulnerabilities": [
    #     {
    #       "url": "http://example.com/view?file=../../etc/passwd",
    #       "param": "file",
    #       "type": "Path Traversal",
    #       "tool": "LFI Hunter (Conceptual)",
    #       "evidence": "Found 'root:x:0:0' in response."
    #     }
    #   ]
    # }
    # Or, if no vulns: { "notes": "LFI scanning skipped...", "vulnerabilities": [] }

    raw_vulnerabilities = data.get("vulnerabilities", [])
    if not raw_vulnerabilities:
        return unified_vulnerabilities

    for vuln in raw_vulnerabilities:
        vuln_type_detail = vuln.get("type", "Local File Inclusion (LFI)")
        if "Path Traversal" in vuln_type_detail:
            severity = "High"
            confidence = "Medium" # Needs verification of actual file content
        elif "PHP Wrapper" in vuln_type_detail: # e.g. php://filter
            severity = "High"
            confidence = "Medium"
        else: # Generic LFI
            severity = "Medium"
            confidence = "Low"

        description = vuln.get("description", f"Potential {vuln_type_detail} identified by {vuln.get('tool', 'LFI Hunter')}.")
        if vuln.get("param"):
            description += f" Affected parameter: {vuln.get('param')}."
        if vuln.get("evidence"):
            description += f" Evidence: {vuln.get('evidence')}"

        now_utc = datetime.now(timezone.utc).isoformat()

        unified_vuln = {
            "id": str(uuid.uuid4()),
            "vulnerability_type": f"Local File Inclusion (LFI) - {vuln_type_detail}",
            "description": description,
            "target_url": vuln.get("url", "N/A"),
            "affected_component": f"Parameter: {vuln.get('param')}" if vuln.get('param') else None,
            "payload": vuln.get("payload", None), # Placeholder might not have specific payloads
            "evidence": vuln.get("evidence", f"Finding reported by {vuln.get('tool', 'LFI Hunter')}."),
            "severity": severity,
            "confidence": confidence,
            "source_modules": [vuln.get("tool", "LFI Hunter")],
            "first_seen_timestamp": now_utc,
            "last_seen_timestamp": now_utc,
            "status": "New",
            "cwe_ids": [22, 23, 98], # CWEs for Path Traversal, Relative Path Traversal, PHP File Inclusion
            "cvss_vector": None,
            "cvss_score": None,
            "remediation_advice": "Validate and sanitize user-supplied input used in file paths. Use allowlists of acceptable files/paths. Disable dangerous PHP wrappers if not needed.",
            "tags": ["LFI", vuln_type_detail.replace(" ", "_"), vuln.get("tool", "LFI Hunter").replace(" ", "_")],
            "scan_id": scan_id
        }
        unified_vulnerabilities.append(unified_vuln)

    return unified_vulnerabilities

if __name__ == '__main__':
    dummy_data = {
        "notes": "Conceptual LFI scan completed for example.com.",
        "vulnerabilities": [
            {
                "url": "http://example.com/view?file=../../etc/passwd",
                "param": "file",
                "type": "Path Traversal",
                "tool": "LFI Hunter (Conceptual)",
                "payload": "../../etc/passwd",
                "evidence": "Found 'root:x:0:0' in response."
            },
            {
                "url": "http://example.com/load?module=php://filter/convert.base64-encode/resource=index.php",
                "param": "module",
                "type": "PHP Wrapper Abuse",
                "tool": "LFI Hunter (Conceptual)",
                "payload": "php://filter/convert.base64-encode/resource=index.php",
                "evidence": "Base64 encoded content received."
            }
        ]
    }
    dummy_file = "dummy_lfi_vulnerabilities.json"
    with open(dummy_file, 'w') as f:
        json.dump(dummy_data, f, indent=2)

    parsed_vulns = parse_lfi_vulnerabilities(dummy_file, "test_scan_lfi_001")
    if parsed_vulns:
        print(f"Successfully parsed {len(parsed_vulns)} LFI vulnerabilities:")
        for v in parsed_vulns:
            print(json.dumps(v, indent=2))
    else:
        print("No LFI vulnerabilities parsed or file not found.")

    import os
    os.remove(dummy_file)
